"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Infill = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const serializers = __importStar(require("../../../../serialization/index"));
const json_1 = require("../../../../core/json");
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors/index"));
class Infill {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Generate audio that smoothly connects two existing audio segments. This is useful for inserting new speech between existing speech segments while maintaining natural transitions.
     *
     * **The cost is 1 credit per character of the infill text plus a fixed cost of 300 credits.**
     *
     * Only the `sonic-preview` model is supported for infill at this time.
     *
     * At least one of `left_audio` or `right_audio` must be provided.
     *
     * As with all generative models, there's some inherent variability, but here's some tips we recommend to get the best results from infill:
     * - Use longer infill transcripts
     *   - This gives the model more flexibility to adapt to the rest of the audio
     * - Target natural pauses in the audio when deciding where to clip
     *   - This means you don't need word-level timestamps to be as precise
     * - Clip right up to the start and end of the audio segment you want infilled, keeping as much silence in the left/right audio segments as possible
     *   - This helps the model generate more natural transitions
     */
    bytes(leftAudio, rightAudio, request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f;
            const _request = yield core.newFormData();
            yield _request.appendFile("left_audio", leftAudio);
            yield _request.appendFile("right_audio", rightAudio);
            _request.append("model_id", request.modelId);
            _request.append("language", request.language);
            _request.append("transcript", request.transcript);
            _request.append("voice_id", request.voiceId);
            _request.append("output_format[container]", serializers.OutputFormatContainer.jsonOrThrow(request.outputFormatContainer, {
                unrecognizedObjectKeys: "strip",
            }));
            _request.append("output_format[sample_rate]", request.outputFormatSampleRate.toString());
            if (request.outputFormatEncoding != null) {
                _request.append("output_format[encoding]", serializers.RawEncoding.jsonOrThrow(request.outputFormatEncoding, { unrecognizedObjectKeys: "strip" }));
            }
            if (request.outputFormatBitRate != null) {
                _request.append("output_format[bit_rate]", request.outputFormatBitRate.toString());
            }
            if (request.voiceExperimentalControlsSpeed != null) {
                _request.append("voice[__experimental_controls][speed]", (() => {
                    const mapped = serializers.Speed.jsonOrThrow(request.voiceExperimentalControlsSpeed, {
                        unrecognizedObjectKeys: "strip",
                    });
                    return typeof mapped === "string" ? mapped : (0, json_1.toJson)(mapped);
                })());
            }
            if (request.voiceExperimentalControlsEmotion != null) {
                for (const _item of request.voiceExperimentalControlsEmotion) {
                    _request.append("voice[__experimental_controls][emotion][]", serializers.Emotion.jsonOrThrow(_item, { unrecognizedObjectKeys: "strip" }));
                }
            }
            const _maybeEncodedRequest = yield _request.getRequest();
            const _response = yield ((_a = this._options.fetcher) !== null && _a !== void 0 ? _a : core.fetcher)({
                url: (0, url_join_1.default)((_c = (_b = (yield core.Supplier.get(this._options.baseUrl))) !== null && _b !== void 0 ? _b : (yield core.Supplier.get(this._options.environment))) !== null && _c !== void 0 ? _c : environments.CartesiaEnvironment.Production, "/infill/bytes"),
                method: "POST",
                headers: Object.assign(Object.assign(Object.assign({ "Cartesia-Version": (_f = (_d = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.cartesiaVersion) !== null && _d !== void 0 ? _d : (_e = this._options) === null || _e === void 0 ? void 0 : _e.cartesiaVersion) !== null && _f !== void 0 ? _f : "2024-06-10", "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "@cartesia/cartesia-js", "X-Fern-SDK-Version": "2.1.7", "User-Agent": "@cartesia/cartesia-js/2.1.7", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, (yield this._getCustomAuthorizationHeaders())), _maybeEncodedRequest.headers), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                requestType: "file",
                duplex: _maybeEncodedRequest.duplex,
                body: _maybeEncodedRequest.body,
                responseType: "streaming",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                throw new errors.CartesiaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.CartesiaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.CartesiaTimeoutError("Timeout exceeded when calling POST /infill/bytes.");
                case "unknown":
                    throw new errors.CartesiaError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getCustomAuthorizationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKeyValue = yield core.Supplier.get(this._options.apiKey);
            return { "X-API-Key": apiKeyValue };
        });
    }
}
exports.Infill = Infill;
