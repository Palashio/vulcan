/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Cartesia from "../../../index";
export declare namespace ApiStatus {
    interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2024-06-10";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2024-06-10";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class ApiStatus {
    protected readonly _options: ApiStatus.Options;
    constructor(_options?: ApiStatus.Options);
    /**
     * @param {ApiStatus.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apiStatus.get()
     */
    get(requestOptions?: ApiStatus.RequestOptions): Promise<Cartesia.ApiInfo>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-API-Key": string | undefined;
    }>;
}
