/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import { ApiStatus } from "./api/resources/apiStatus/client/Client";
import { Datasets } from "./api/resources/datasets/client/Client";
import { Infill } from "./api/resources/infill/client/Client";
import { Tts } from "./api/resources/tts/client/Client";
import { VoiceChanger } from "./api/resources/voiceChanger/client/Client";
import { Voices } from "./api/resources/voices/client/Client";
export declare namespace CartesiaClient {
    interface Options {
        environment?: core.Supplier<environments.CartesiaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2024-06-10";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Cartesia-Version header */
        cartesiaVersion?: "2024-06-10";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class CartesiaClient {
    protected readonly _options: CartesiaClient.Options;
    protected _apiStatus: ApiStatus | undefined;
    protected _datasets: Datasets | undefined;
    protected _infill: Infill | undefined;
    protected _tts: Tts | undefined;
    protected _voiceChanger: VoiceChanger | undefined;
    protected _voices: Voices | undefined;
    constructor(_options?: CartesiaClient.Options);
    get apiStatus(): ApiStatus;
    get datasets(): Datasets;
    get infill(): Infill;
    get tts(): Tts;
    get voiceChanger(): VoiceChanger;
    get voices(): Voices;
}
